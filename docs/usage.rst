Usage
=====

The primary interface of inline-snapshot is the :func:`.snapshot_queries` context manager, which captures SQL queries executed through Django and returns a list of their fingerprints.
This list can then be compared against a snapshot using |inline-snapshots snapshot() function|__.
When you first write a test, use an empty ``snapshot()`` call:

.. |inline-snapshots snapshot() function| replace:: inline-snapshot’s ``snapshot()`` function
__ https://15r10nk.github.io/inline-snapshot/latest/

.. code-block:: python

    from inline_snapshot import snapshot
    from inline_snapshot_django import snapshot_queries

    from example import Character


    class CharacterTests(TestCase):
        def test_all(self):
            with snapshot_queries() as snap:
                list(Character.objects.all())

            assert snap == snapshot()

Then run the test.
It will fail and inline-snapshot will fill in the ``snapshot()`` call with the captured query list:

.. code-block:: console

    $ pytest
    ...
    tests/test_example.py .E...                                     [100%]

    ═══════════════════════════ inline-snapshot ═══════════════════════════
    ────────────────────────── Create snapshots ───────────────────────────
    ╭─────────────────────── tests/test_example.py ───────────────────────╮
    │ @@ -15,4 +15,4 @@                                                   │
    │                                                                     │
    │          with snapshot_queries() as snap:                           │
    │              list(Character.objects.all())                          │
    │                                                                     │
    │ -        assert snap == snapshot()                                  │
    │ +        assert snap == snapshot(["SELECT ... FROM tests_character" │
    ╰─────────────────────────────────────────────────────────────────────╯
    These changes will be applied, because you used create

inline-snapshot directly modifies the test file to replace the ``snapshot()`` call with the captured list.
You can then run the test again, and it will pass.

The system may later change its queries, for example to add or remove them, or to change their fingerprinted structure.
In that case, inline-snapshot will again fail the test, but offer to fix the snapshot with the new captured value:

.. code-block:: console

    $ pytest
    ...
    tests/test_example.py .E...                                     [100%]

    ═══════════════════════════ inline-snapshot ═══════════════════════════
    ──────────────────────────── Fix snapshots ────────────────────────────
    ╭─────────────────────── tests/test_example.py ───────────────────────╮
    │ @@ -16,4 +16,6 @@                                                   │
    │                                                                     │
    │              list(Character.objects.all())                          │
    │              list(Character.objects.all())                          │
    │                                                                     │
    │ -        assert snap == snapshot(["SELECT ... FROM tests_character" │
    │ +        assert snap == snapshot(                                   │
    │ +            ["SELECT ... FROM tests_character", "SELECT ... FROM t │
    │ +        )                                                          │
    ╰─────────────────────────────────────────────────────────────────────╯
    Do you want to fix these snapshots? [y/n] (n):

Follow the prompt to apply such changes.
This prompt is shown only on interactive terminals on Python 3.11+.

inline-snapshot adds the ``--inline-snapshot`` option to pytest which controls the snapshot mode.
Use ``--inline-snapshot=update`` to automatically update snapshots without prompting.
See `the documentation <https://15r10nk.github.io/inline-snapshot/latest/pytest/>`__ for more details.

SQL fingerprints
----------------

SQL fingerprints are generated by `sql-impressao <https://pypi.org/project/sql-impressao/>`__, a wrapper around the `sql-fingerprint Rust crate <https://github.com/adamchainz/sql-fingerprint>`__.
It applies changes intended to make fingerprints stable even when you make small changes to your queries or database schema.
Some changes it makes:

* Identifier and value lists are reduced to '...'.
* Identifiers consisting of letters, numbers, and underscores have any quoting removed.
* Savepoint IDs are replaced with 's1', 's2', etc.

For a full list of the changes it makes, or to report fingerprinting issues, head to `the sql-fingerprint repository <https://github.com/adamchainz/sql-fingerprint>`__.
